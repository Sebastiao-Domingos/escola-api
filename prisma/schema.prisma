// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Administrador {
  id    String   @unique @default(uuid())
  nome  String
  senha String 
  data_nascimento DateTime
  naturalidade Naturalidade?
  foto Imagens?
  endereco Endereco[]
  contatos Contato[]
  createAt DateTime @default(now()) 
  updatedAt DateTime @default(now())
}

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

model Pais {
  id  String @unique @default(uuid()) @db.VarChar(36) 
  nome String @unique
  provincias Provincia[]
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Provincia {
  id String @unique @default(uuid()) @db.VarChar(36) 
  pais_id String @db.VarChar(36)
  nome String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  municipios Municipio[]
  pais Pais @relation(fields: [pais_id] , references: [id] , onDelete: Cascade , onUpdate: Cascade)
}

model Municipio {
  id String @unique @default(uuid()) @db.VarChar(36) 
  provincia_id String @db.VarChar(36)
  nome String
  enderecos Endereco[]
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  provincia Provincia @relation(fields: [provincia_id] , references: [id], onDelete:  Cascade , onUpdate: Cascade)
}

model Endereco {
  id String @unique @default(uuid()) @db.VarChar(36) 
  municipio_id String @db.VarChar(36)
  distrito String
  rua String 
  ponto_de_referencia String
  estudante_id String? @db.VarChar(36)
  professor_id String? @db.VarChar(36)
  administrador_id String? @db.VarChar(36)
  administrador Administrador? @relation(fields: [administrador_id] , references: [id] , onDelete: Cascade ,onUpdate: Cascade)
  municipio Municipio @relation(fields: [municipio_id] , references: [id], onDelete: Cascade , onUpdate: Cascade)
  estudante Estudante? @relation(fields: [estudante_id],references: [id] , onDelete:  Cascade , onUpdate: Cascade)
  professor Professor? @relation(fields: [professor_id] , references: [id] ,onDelete: Cascade ,onUpdate: Cascade)
  createdAt DateTime @default(now()) 
  updatedAt DateTime @default(now())
}

model Estudante {
  id String @unique @default(uuid()) @db.VarChar(36) @id
  numero_processo Int @unique  
  nome String
  data_nascimento DateTime
  turma_id String? @db.VarChar(36)
  naturalidade Naturalidade?
  foto Imagens?
  endereco Endereco[]
  contatos Contato[]
  notas Nota[]
  createdAt DateTime @default(now()) 
  updatedAt DateTime @default(now())
  turma Turma? @relation(fields: [turma_id] ,references: [id] , onDelete: Cascade , onUpdate: Cascade)
}
model Naturalidade {
  id String @unique @default(uuid()) @db.VarChar(36) 
  naturalidade String
  municipio_id String
  estudante Estudante? @relation(fields: [estudante_id] , references: [id])
  estudante_id String? @unique @db.VarChar(36)
  professor Professor? @relation(fields: [professor_id] , references: [id])
  professor_id String? @unique @db.VarChar(36)
  administrador_id String? @db.VarChar(36) @unique
  administrador Administrador? @relation(fields: [administrador_id] , references: [id] , onDelete: Cascade ,onUpdate: Cascade)
  createdAt DateTime @default(now()) 
  updatedAt DateTime @default(now())
}

model Contato {
  id String @default(uuid()) @unique @db.VarChar(36) 
  nome String
  valor String @unique
  estudante_id String? @db.VarChar(36)
  estudante Estudante? @relation(fields: [estudante_id] , references: [id], onDelete: Cascade , onUpdate:  Cascade)
  professor_id String? @db.VarChar(36)
  professor Professor? @relation(fields: [professor_id ], references: [id], onDelete: Cascade , onUpdate:  Cascade)
  administrador_id String? @db.VarChar(36)
  administrador Administrador? @relation(fields: [administrador_id] , references: [id] , onDelete: Cascade ,onUpdate: Cascade)
  createdAt DateTime @default(now()) 
  updatedAt DateTime @default(now())
}

model Turma {
  id String @unique @default(uuid()) @db.VarChar(36) 
  nome String @unique
  turno String @default("Manh√£")
  curso_id String @db.VarChar(36)
  ano_academico_id String @db.VarChar(36)
  estudantes Estudante[]
  turma_professor TurmaProfessor[]
  ano_academico Ano_academico @relation(fields: [ano_academico_id] , references: [id] , onDelete: Cascade , onUpdate: Cascade)
  curso Curso @relation(fields: [curso_id] , references: [id] , onDelete: Cascade, onUpdate: Cascade)
  createdAt DateTime @default(now()) 
  updatedAt DateTime @default(now())
}

model Ano_academico {
  id String @unique @default(uuid()) @db.VarChar(36) 
  valor Int @unique
  turmas Turma[]
  createAt DateTime @default(now()) 
  updatedAt DateTime @default(now())
}

model Curso {
  id String @default(uuid())  @unique @db.VarChar(36) 
  nome String @unique
  departamento_id String? @db.VarChar(36) @unique
  turmas Turma[]
  departamento Departamento? @relation(fields: [departamento_id] , references: [id])
  createdAt DateTime @default(now()) 
  updatedAt DateTime @default(now())
}

model Departamento {
  id String @unique @default(uuid()) @db.VarChar(36) 
  codigo String @unique
  nome String
  cursos Curso?
  createdAt DateTime @default(now()) 
  updatedAt DateTime @default(now())
}

model Professor {
  id String @unique @default(uuid()) @db.VarChar(36) 
  nome String
  status TypeStatus @default(desativo)
  data_nascimento DateTime
  naturalidade Naturalidade?
  foto Imagens?
  endereco Endereco[]
  contatos Contato[]
  turmas_professor TurmaProfessor[]
  createdAt DateTime @default(now()) 
  updatedAt DateTime @default(now())
}

enum TypeStatus {
  ativo
  desativo
}

model TurmaProfessor {
  id String  @default(uuid()) @unique @db.VarChar(36) 
  turma_id String
  professor_id String
  disciplina_id String
  professor Professor @relation(fields: [professor_id],references: [id])
  turma Turma @relation(fields: [turma_id] , references: [id])
  disciplina Disciplina @relation(fields: [disciplina_id] , references: [id])
  createdAt DateTime @default(now()) 
  updatedAt DateTime @default(now())
}

model Disciplina {
  id String  @default(uuid()) @unique @db.VarChar(36) 
  nome String
  carga Int
  turma_professor TurmaProfessor[]
  notas Nota[]
  createdAt DateTime @default(now()) 
  updatedAt DateTime @default(now())
}

model Imagens {
  id String @default(uuid()) @unique @db.VarChar(36) 
  path String
  estudante_id String? @unique @db.VarChar(36)
  professor_id String? @unique @db.VarChar(36)
  estudante Estudante? @relation(fields: [estudante_id] , references: [id])
  professor Professor? @relation(fields: [professor_id] , references: [id])
  administrador_id String? @db.VarChar(36) @unique
  administrador Administrador? @relation(fields: [administrador_id] , references: [id] , onDelete: Cascade ,onUpdate: Cascade)
  createdAt DateTime @default(now()) 
  updatedAt DateTime @default(now())
}


model Nota {
  id String @unique @default(uuid()) @db.VarChar(36) @id
  valor Decimal @default(0.0)
  disciplina_id String @db.VarChar(36)
  estudante_id String @db.VarChar(36)
  createdAt DateTime @default(now()) 
  updatedAt DateTime @default(now())
  estudante Estudante @relation(fields: [estudante_id] , references: [id])
  disciplina Disciplina @relation(fields: [disciplina_id], references: [id])
}

